#Springboot-jdk-17
name: main-workflow
on: 
  workflow_dispatch
env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_PORT: ${{ secrets.DB_PORT }}
  GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
  APP_NAME: ${{ github.repository }})
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      checks: write
    outputs:
      file1: ${{ steps.pub.outputs.test}}
    steps:
    # Checking out the code
      - name: Checkout                            
        uses: actions/checkout@v4.1.1
      - name: echo
        run: |
          ls -la
          echo "passed"
          
    # Scanning for secret detection
      - name: GitGuardian Shield Action          
        run: |
          pipx install ggshield
          ggshield secret scan ci
        continue-on-error: true


   
    
    # Setting up Java Environment
      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: package
        run: mvn clean package
      - name: file check
        run: ls -la target
      - name: unit-test
        run: | 
          mvn test
          ls -la
          ls -la target
          cd target
          cd site
          ls -la jacoco
    # Vulnerability Check using Snyk Code
      # - name: Snyk
      #   uses: snyk/actions/maven@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: test
      #     args: |
      #       --severity-threshold=high
      #       --sarif-file-output=snyk.sarif
      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: snyk.sarif
          
      # Publishing the test results to the Job Summary
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.11.0
        with:
          comment_mode: off
          files: | 
            target/surefire-reports/TEST-*.xml
     # Analysing the Source Code using SonarCloud
      - name: Analyze with SonarCloud
        run: |
          #chmod +x ./mvnw
          mvn -B verify sonar:sonar -Dsonar.projectKey=super-info -Dsonar.organization=super-info -Dsonar.host.url=https://sonarcloud.io -Dsonar.coverage.jacoco.xmlReportPaths=${{ github.workspace }}/target/site/jacoco/jacoco.xml -Dsonar.branch.name=${{ github.ref_name }} -Dsonar.qualitygate.wait=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

    # Docker Build
      - name: Docker Build
        run: |
          docker build -t crud-app:1.0.${{ github.run_number }}
          docker tag crud-app:1.0.${{ github.run_number }} $APP_NAME:1.0.${{ github.run_number }}
          # docker tag crud-app:1.0.${{ github.run_number }} $APP_NAME:1.0.${{ github.run_number }}
          # docker login -u shmdus -p cannonbolt0204
          # docker push shmdus/crud-app:1.0.${{ github.run_number }}
          
          
    #  Pushing Image to PRIVATE ARFTIFACT REGISTRY
    #   - name: Google Artifact Registry Build & Push
    #     uses: piotr-krusinski/action-google-artifact-registry@v1.0
    #     with:
    #       google_project_id: ${{vars.GOOGLE_PROJECT_ID}}
    #       google_artifact_registry_region: us-central
    #       google_artifact_registry_hostname: gcr.io
    #       google_artifact_registry_name: github-ci
    #       service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
    #       dockerfile: ./
    #       image_name: $APP_NAME
    #       tag_list: 1.0.${{ github.run_number }}
    
      - name: Push Docker GCR
        uses: RaccoonDev/push-docker-gcr@v1
        env:
          GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }} 
        with:
        # Google Container Registry Host
          image_name: $APP_NAME
          image_tag: 1.0.${{ github.run_number }}
          
        
     
        
    #  - name: JaCoCo Report
    #    uses: Madrapps/jacoco-report@v1.6.1
    #    with:
    #      paths: target/site/jacoco/jacoco.xml
    #      token: ${{secrets.TOKEN_REPO}}
    #      min-coverage-overall: 60
      
